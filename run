#/bin/bash

set -e

IMAGE="fsl-image-qt5-validation-imx" #we build version with QT here, but could be changed

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

export BBPATH=$DIR/build

RED='\033[0;31m'
NC='\033[0m' # No Color

function cecho {
	echo "$1$2$NC" 
}

function clean {
	cd $DIR/runfolder/build
	bitbake -c clean $IMAGE
}


function init {
	if [ -d "runfolder" ] 
	then
		cecho $RED "Build directory exists. It you had build there, all results will be lost and the build can take a long time" 
		read -p "Do you want to remove it?" -n 1 -r
		if [[ $REPLY =~ ^[Yy]$ ]]
		then
			rm -rf runfolder
		else
			return 
		fi
	fi	

	mkdir runfolder 
	cd runfolder

	# get yocto
	repo init -u https://source.codeaurora.org/external/imx/imx-manifest -b imx-linux-sumo -m imx-4.14.98-2.0.0_demo_mender.xml
	repo sync
	DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk . fsl-setup-mender.sh -b build
	cd ..

	# configure NFC
	git clone https://github.com/NXPNFCLinux/meta-nxp-nfc.git sources/meta-nxp-nfc
	echo 'BBLAYERS += " ${BSPDIR}/sources/meta-nxp-nfc"' >> build/conf/bblayers.conf

	# other changes
	sed -E -i "s/^.*MENDER_STORAGE_TOTAL_SIZE_MB.*/MENDER_STORAGE_TOTAL_SIZE_MB = \"16384\"/" $DIR/runfolder/build/conf/local.conf # increase maximum image size
	
	# add AP layer
	cd $DIR/runfolder/build
	bitbake-layers add-layer ../../wlan_accesspoint

	# some system requirements:
	sudo apt install screen libncurses5-dev 	

	# apply local.conf changes
	cat $DIR/myextensions/local.conf.exts/* >> $DIR/runfloder/buid/conf/local.conf
	
	cd $DIR
	mkdir deploy || true
}

function doDeployImages {
	cd $DIR
	mv $DIR/runfolder/build/tmp/deploy/images/imx8mmevk/*.sdimg $DIR/deploy 

	if [ -f "after_deploy" ]
        then
		source after_deploy
        fi
}

function buildall {
	# i don't use how to patch kernel devices and configs before the first build. Those files don't exist at all
	
	cd $DIR/runfolder/build
	bitbake $IMAGE # so, I build at the first time (nfc extension and kernel configs are not here yet) and it creates files we are going to fix 
	
	# now patch files in tmp directory:
	FLAG_FILE="pn7150_patched"
	if [ -f "$FLAG_FILE" ]
        then
		echo "kernel seems to be already pathed, skip this step"
	else
		patch tmp/work-shared/imx8mmevk/kernel-source/arch/arm64/boot/dts/freescale/fsl-imx8mm-evk.dts $DIR/myextensions/nfc_pn7150/kernel_devices.patch # add PN7150 NFC module
		touch $FLAG_FILE
	fi

	cp $DIR/myextensions/.config tmp/work/imx8mmevk-poky-linux/linux-imx/4.14.98-r0/build # replace kernel config with our one  

	# now rebuild the kernel
	bitbake -f -c compile linux-imx && bitbake -f -c deploy linux-imx
	bitbake $IMAGE

	doDeployImages
}

function rebuild {
 	cd $DIR/runfolder/build	
	bitbake $IMAGE
	doDeployImages
}

function configure {
	cd $DIR/runfolder/build
	bitbake -c menuconfig virtual/kernel
	
	cd $DIR
	cp ./runfolder/build/tmp/work/imx8mmevk-poky-linux/linux-imx/4.14.98-r0/build/.config myextensions/

	CONF_CHANGED=$(git status | fgrep myextensions/.config)
	if [[ ! -z "$CONF_CHANGED" ]]
	then
	 echo "Your .config from repo was changed. Commit it to persist changes!"
	fi
}

function createsdk {
	cd $DIR/runfolder/build
	bitbake -c populate_sdk $IMAGE
	$DIR/build/tmp/deploy/sdk/*.sh deploy
}

# -------------------     start    ------------------ #

cd $DIR

if [ -f "runfolder/sources/poky/oe-init-build-env" ]
then
	cd $DIR/runfolder
	source sources/poky/oe-init-build-env build
	cd $DIR
fi
echo "current \$PATH is: \"$PATH\""

# process certain step
echo "Started '$1' at $(date -u)" >> build.log

case "$1" in
  "init")
    init 
    ;;
  "rebuild")
    rebuild 
    ;;
  "buildall")
    buildall 
    ;;
  "configure")
    configure 
    ;;
  "clean")
    clean
    ;;
  *)
    echo "Usage: $0 [init|buildall|rebuild|clean]"
    exit 1
    ;;
esac

echo "Finished at $(date -u)" >> build.log
